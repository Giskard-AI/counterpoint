name: Full CI
on:
  push:
    branches:
      - main
      - dev
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pre_checks:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Install uv
        uses: astral-sh/setup-uv@e92bafb6253dcd438e0484186d7669ea7a8ca1cc # v6

      - name: Setup development environment
        run: make setup

      - name: Run all checks
        run: make check

  test:
    runs-on: ubuntu-latest
    env:
      TEST_MODEL: "gemini/gemini-2.0-flash"
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
    timeout-minutes: 30
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@e92bafb6253dcd438e0484186d7669ea7a8ca1cc # v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup development environment
        run: make setup

      - name: Run tests
        run: make test

  downstream-tests:
    runs-on: ubuntu-latest
    needs: [pre_checks, test]
    env:
      TEST_MODEL: "gemini/gemini-2.0-flash"
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        include:
          - pkg: lidar
            ssh_secret: LIDAR_KEY
    steps:
      - name: Checkout counterpoint code
        uses: actions/checkout@v4
        with:
          path: counterpoint

      - name: Checkout downstream package
        uses: actions/checkout@v4
        with:
          repository: Giskard-AI/${{ matrix.pkg }}
          path: ${{ matrix.pkg }}
          ssh-key: ${{ secrets[matrix.ssh_secret] }}

      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Build counterpoint wheel
        working-directory: counterpoint
        run: |
          uv build

      - name: Setup downstream package environment
        working-directory: ${{ matrix.pkg }}
        run: |
          # Update pyproject.toml to use local counterpoint build
          if [ -f pyproject.toml ]; then
            # Check if counterpoint is already in dependencies
            if grep -q "counterpoint" pyproject.toml; then
              # Copy wheel to current directory with proper name
              WHEEL_PATH=$(ls ../counterpoint/dist/*.whl | head -1)
              WHEEL_NAME=$(basename "$WHEEL_PATH")
              cp "$WHEEL_PATH" "./$WHEEL_NAME"
              
              # Handle uv sources format: counterpoint = { git = "..." }
              if grep -q "\[tool\.uv\.sources\]" pyproject.toml; then
                # Replace the git source with path in [tool.uv.sources] section
                sed -i.bak "/\[tool\.uv\.sources\]/,/^\[/ s|counterpoint = { git = \"[^\"]*\" }|counterpoint = { path = \"./$WHEEL_NAME\" }|g" pyproject.toml
                rm -f pyproject.toml.bak
              else
                # If no [tool.uv.sources] section, add one
                echo "" >> pyproject.toml
                echo "[tool.uv.sources]" >> pyproject.toml
                echo "counterpoint = { path = \"./$WHEEL_NAME\" }" >> pyproject.toml
              fi
            else
              echo "Warning: counterpoint not found in dependencies"
            fi
          fi

          # Install dependencies
          uv sync --all-extras

      - name: Run downstream tests
        working-directory: ${{ matrix.pkg }}
        run: |
          # Run all tests
          if [ -f Makefile ] && grep -q "^test:" Makefile; then
            make test
          else
            uv run pytest tests/ --maxfail=5
          fi
