name: Full CI
on:
  push:
    branches:
      - main
      - dev
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pre_checks:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Install uv
        uses: astral-sh/setup-uv@e92bafb6253dcd438e0484186d7669ea7a8ca1cc # v6

      - name: Setup development environment
        run: make setup

      - name: Run all checks
        run: make check

  test:
    runs-on: ubuntu-latest
    env:
      TEST_MODEL: "gemini/gemini-2.0-flash"
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
    timeout-minutes: 30
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@e92bafb6253dcd438e0484186d7669ea7a8ca1cc # v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup development environment
        run: make setup

      - name: Run tests
        run: make test

  downstream-tests:
    runs-on: ubuntu-latest
    needs: [pre_checks, test]
    env:
      TEST_MODEL: "gemini/gemini-2.0-flash"
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        include:
          - pkg: lidar
            ssh_secret: LIDAR_KEY
    steps:
      - name: Checkout counterpoint code
        uses: actions/checkout@v4
        with:
          path: counterpoint

      - name: Setup SSH
        uses: webfactory/ssh-agent@a6f90b1f127823b31d4d4a8d96047790581349bd # v0.9.1
        with:
          ssh-private-key: |
            ${{ secrets.RELAIS_KEY }}
            ${{ secrets[matrix.ssh_secret] }}

      - name: Clone downstream package
        run: |
          git clone git@github.com:Giskard-AI/${{ matrix.pkg }}.git ${{ matrix.pkg }}

      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Build counterpoint wheel
        working-directory: counterpoint
        run: |
          uv build

      - name: Setup downstream package environment
        working-directory: ${{ matrix.pkg }}
        run: |
          # Update pyproject.toml to use local counterpoint build
          if [ -f pyproject.toml ]; then
            # Copy wheel to current directory with proper name
            WHEEL_PATH=$(ls ../counterpoint/dist/*.whl | head -1)
            WHEEL_NAME=$(basename "$WHEEL_PATH")
            cp "$WHEEL_PATH" "./$WHEEL_NAME"
            
            # Show current pyproject.toml for debugging
            echo "=== Original pyproject.toml [tool.uv.sources] section ==="
            grep -A 10 "\[tool\.uv\.sources\]" pyproject.toml || echo "No [tool.uv.sources] section found"
            
            # Check if [tool.uv.sources] section exists
            if ! grep -q "\[tool\.uv\.sources\]" pyproject.toml; then
              echo "ERROR: [tool.uv.sources] section not found in pyproject.toml"
              echo "Downstream package MUST have counterpoint in [tool.uv.sources] section"
              exit 1
            fi
            
            # Check if counterpoint is defined in [tool.uv.sources] section
            if ! sed -n '/\[tool\.uv\.sources\]/,/^\[/p' pyproject.toml | grep -q "^counterpoint\s*="; then
              echo "ERROR: counterpoint not found in [tool.uv.sources] section"
              echo "Downstream package MUST have counterpoint in [tool.uv.sources] section"
              exit 1
            fi
            
            # Update only the counterpoint entry in [tool.uv.sources] section
            # This preserves other entries in the section
            sed -i.bak '/\[tool\.uv\.sources\]/,/^\[/{
              /^counterpoint\s*=/c\
            counterpoint = { path = "../counterpoint", editable = true }
            }' pyproject.toml
            
            echo "=== Updated pyproject.toml [tool.uv.sources] section ==="
            grep -A 10 "\[tool\.uv\.sources\]" pyproject.toml
          fi

          # Update uv.lock file
          uv lock

          # Install dependencies
          uv sync --all-extras

      - name: Run downstream tests
        working-directory: ${{ matrix.pkg }}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Run all tests
          if [ -f Makefile ] && grep -q "^test:" Makefile; then
            make test
          else
            uv run pytest tests/ --maxfail=5
          fi
